#!/usr/bin/perl -w

##############################################################
# subread-merge.pl
# John Garbe
# December 2014
#
###############################################################

=head1 NAME

subread-merge.pl - Combine together multiple featurecount files generated by the Subread featureCounts program.

=head1 SYNOPSIS

subread-merge.pl subread-counts1.txt [subread-counts2.txt ...]
subread-merge.pl -f filelist.txt

=head1 DESCRIPTION

Combine multiple subread-counts files into one.

-f filelist.txt : provide a file with a list of subread-counts.txt files, one per line. A second tab-delimited column may be included containing sample names.

=cut

##################### Initialize ###############################

use Getopt::Std;
use Pod::Usage;

our ($opt_h, $opt_o);

$usage = "USAGE: subread-merge.pl subread-counts1.txt [subread-counts2.txt ...]\n";
die $usage unless ($#ARGV >= 0);
die $usage unless getopts('hf:o:');
pod2usage(q(-verbose) => 3) if ($opt_h);

$ofile = $opt_o // "-";

# Get list of alignment files
if (defined($opt_f)) {
    open IFILE, "$opt_f" or die "Cannot open file list $opt_f: $!\n";
    while (<IFILE>) {
	chomp;
	next unless length;
	@line = split /\t/;
	if (not -e $line[0]) { # skip files that don't exist
	    print STDERR "File $line[0] not found, skipping\n";
	    next;
	}
	push @files, $line[0];
	push @samples, $line[1] // $line[0];
    } 
} else { 
    @files = @ARGV; 
    @samples = @ARGV;
}

# For debugging:
#for $i (0..$#files) { 
#    print "$files[$i] $samples[$i]\n";
#}
#print "@files\n";
#print "@samples\n";

open OFILE, ">$ofile" or die "Cannot open output file $ofile: $!\n";

# merge all of the files
for $i (0..$#files) {
    $ifile = $files[$i];
    open IFILE, "$ifile" or die "Cannot open input file $ifile $!\n";

    while (<IFILE> =~ /^#/) {}; # these files have comments at the top
#    $header = <IFILE>;
#    chomp $header;
    while ($line = <IFILE>) {
	chomp $line;
	my ($gene, $chr, $start, $end, $strand, $length, $count) = split /\t/, $line;
	$data{$gene}{$samples[$i]} = $count;
    }
    close IFILE;
}

print OFILE "ID";
foreach $sample (@samples) {
    print OFILE "\t$sample";
}
print OFILE "\n";

foreach $gene (keys %data) {
    print OFILE $gene;
    foreach $sample (@samples) {
	$data{$gene}{$sample} = 0 unless ($data{$gene}{$sample});
	print OFILE "\t$data{$gene}{$sample}";
    }
    print OFILE "\n";
}
